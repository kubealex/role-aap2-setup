# Automation Controller Nodes
# There are two valid node_types that can be assigned for this group.
# A node_type=control implies that the node will only be able to run
# project and inventory updates, but not regular jobs.
# A node_type=hybrid will have the ability to run everything.
# If you do not define the node_type, it defaults to hybrid.
#
# control.example node_type=control
# hybrid.example  node_type=hybrid
# hybrid2.example <- this will default to hybrid

{% if groups['controller'] is defined and groups['controller'] | length > 0 %}
[automationcontroller]
{% for controller in groups['controller'] %}
{{ controller }}
{% endfor %}
{% endif %}

# Execution Nodes
# There are two valid node_types that can be assigned for this group.
# A node_type=hop implies that the node will forward jobs to an execution node.
# A node_type=execution implies that the node will be able to run jobs.
# If you do not define the node_type, it defaults to execution.
#
# hop.example node_type=hop
# execution.example  node_type=execution
# execution2.example <- this will default to execution

{% if groups['execution_nodes'] is defined and groups['execution_nodes'] | length > 0 %}
[execution_nodes]
{% for exec_node in groups['execution_nodes'] %}
{{ exec_node }} node_type=execution
{% endfor %}
{% endif %}

{% if groups['hub'] is defined and groups['hub'] | length > 0 %}
[automationhub]
{% for hub in groups['hub'] %}
{{ hub }}
{% endfor %}
{% endif %}

{% if groups['eda'] is defined and groups['eda'] | length > 0 %}
[automationedacontroller]
{% for eda in groups['eda'] %}
{{ eda }}
{% endfor %}
{% endif %}

[database]

[all:vars]
registry_url='registry.redhat.io'
registry_username={{ rhsm_user }}
registry_password={{ rhsm_password }}

{% if groups['controller'] | length > 0 %}
admin_password='redhat'

pg_host=''
pg_port=''
pg_database='awx'
pg_username='awx'
pg_password='redhat'

{% endif %}

{% if groups['hub'] | length > 0 %}
# Automation Hub Configuration
#
automationhub_admin_password='redhat'

automationhub_pg_host={{ groups['controller'][0] }}
automationhub_pg_port='5432'

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password='redhat'

{% if aap_configure_content_signing %}
automationhub_create_default_collection_signing_service = True
automationhub_auto_sign_collections = True
automationhub_require_content_approval = True
automationhub_collection_signing_service_key = {{ aap_content_signing_key }}
automationhub_collection_signing_service_script = {{ aap_content_signign_script }}
{% endif %}

# The default install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False
# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False

{% endif %}

{% if aap_configure_ssl %}
# SSL-related variables
# If set, this will install a custom CA certificate to the system trust store.

custom_ca_cert=/opt/ansible-automation-platform/installer/{{ aap_ca }}

{% if controller_configure_ssl %}

# Certificate and key to install in nginx for the web UI and API

web_server_ssl_cert=/opt/ansible-automation-platform/installer/{{ aap_controller_cert }}
web_server_ssl_key=/opt/ansible-automation-platform/installer/{{ aap_controller_key }}
{% endif %}

{% if hub_configure_ssl %}

# Certificate and key to install in Automation Hub node
automationhub_ssl_cert=/opt/ansible-automation-platform/installer/{{ aap_hub_cert }}
automationhub_ssl_key=/opt/ansible-automation-platform/installer/{{ aap_hub_key }}

{% endif %}

# Server-side SSL settings for PostgreSQL (when we are installing it).
# postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key
{% endif %}

{% if groups['eda'] | length > 0 %}

# Automation EDA Controller Configuration
#

automationedacontroller_admin_password='redhat'

automationedacontroller_pg_host={{ groups['controller'][0] }}
automationedacontroller_pg_port='5432'

automationedacontroller_pg_database='awx'
automationedacontroller_pg_username='awx'
automationedacontroller_pg_password='redhat'

automationedacontroller_controller_verify_ssl = true

# The full routable URL used by EDA to connect to a controller host.
# This URL is required if there is no Automation Controller configured
# in inventory.
#
# automation_controller_main_url=''

# Boolean flag used to verify Automation Controller's
# web certificates when making calls from Automation EDA Controller.
#

{% endif %}



# Keystore file to install in SSO node
# sso_custom_keystore_file='/path/to/sso.jks'

# The default install will deploy SSO with sso_use_https=True
# Keystore password is required for https enabled SSO
# sso_keystore_password=''